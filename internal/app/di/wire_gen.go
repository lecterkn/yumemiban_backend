// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/lecterkn/yumemiban_backend/internal/app/database"
	"github.com/lecterkn/yumemiban_backend/internal/app/handler"
	"github.com/lecterkn/yumemiban_backend/internal/app/provider"
	"github.com/lecterkn/yumemiban_backend/internal/app/repository/mysql"
	"github.com/lecterkn/yumemiban_backend/internal/app/repository/redis"
	"github.com/lecterkn/yumemiban_backend/internal/app/usecase"
)

// Injectors from wire.go:

// ハンドラセットを取得する
func InitializeHandlerSet() *HandlerSet {
	db := database.GetMySQLConnection()
	transactionProvider := provider.NewTransactionProviderImpl(db)
	userRepository := mysql.NewUserRepositoryImpl(db)
	client := database.GetRedisClient()
	tokenRepository := redis.NewTokenRepositoryImpl(client)
	userUsecase := usecase.NewUserUsecase(transactionProvider, userRepository, tokenRepository)
	userHandler := handler.NewUserHandler(userUsecase)
	postRepository := mysql.NewPostRepositoryImpl(db)
	postUsecase := usecase.NewPostUsecase(transactionProvider, postRepository, userRepository)
	postHandler := handler.NewPostHandler(postUsecase)
	jwtMiddleware := handler.NewJWTMiddleware()
	diHandlerSet := &HandlerSet{
		UserHandler:   userHandler,
		PostHandler:   postHandler,
		JWTMiddleware: jwtMiddleware,
	}
	return diHandlerSet
}

// wire.go:

// データベースのコネクタ
var databaseSet = wire.NewSet(database.GetMySQLConnection, database.GetRedisClient)

// リポジトリの実装
var repositorySet = wire.NewSet(mysql.NewUserRepositoryImpl, mysql.NewPostRepositoryImpl, redis.NewTokenRepositoryImpl)

// プロバイダの実装
var providerSet = wire.NewSet(provider.NewTransactionProviderImpl)

// ユースケース
var usecaseSet = wire.NewSet(usecase.NewUserUsecase, usecase.NewPostUsecase)

// ハンドラ
var handlerSet = wire.NewSet(handler.NewUserHandler, handler.NewPostHandler, handler.NewJWTMiddleware)

// 生成されるハンドラ
type HandlerSet struct {
	UserHandler   *handler.UserHandler
	PostHandler   *handler.PostHandler
	JWTMiddleware *handler.JWTMiddleware
}
